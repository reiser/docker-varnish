# Varnish Configuration

# This file is generated by a shell script using ENV vars
include "/etc/varnish/sites/default.vcl";

acl purgers {
  "localhost";
  "172.17.0.0"/24;
}

sub vcl_fetch {
  set beresp.http.x-url = req.url;

  # Varnish determined the object was not cacheable
  if (beresp.ttl <= 0s) {
    set beresp.http.X-Cacheable = "NO:Not Cacheable";

  # You don't wish to cache content for logged in users
  } elsif (req.http.Cookie ~ "(UserID|_session)") {
    set beresp.http.X-Cacheable = "NO:Got Session";
    return(hit_for_pass);

  # You are respecting the Cache-Control=private header from the backend
  } elsif (beresp.http.Cache-Control ~ "private") {
    set beresp.http.X-Cacheable = "NO:Cache-Control=private";
    return(hit_for_pass);

  # Varnish determined the object was cacheable
  } else {
    set beresp.http.X-Cacheable = "YES";
  }

  return(deliver);
}


sub vcl_recv {

  ### parse accept encoding rulesets to normalize
  ### https://www.varnish-cache.org/trac/wiki/VCLExampleNormalizeAcceptEncoding
  if (req.http.Accept-Encoding) {
      if (req.url ~ "\.(jpg|jpeg|png|gif|gz|tgz|bz2|tbz|mp3|ogg|swf|mp4|flv)$") {
              # don't try to compress already compressed files
              remove req.http.Accept-Encoding;
      } elsif (req.http.Accept-Encoding ~ "gzip") {
              set req.http.Accept-Encoding = "gzip";
      } elsif (req.http.Accept-Encoding ~ "deflate") {
              set req.http.Accept-Encoding = "deflate";
      } else {
              # unkown algorithm
              remove req.http.Accept-Encoding;
      }
  }

  # allow PURGE from localhost
  if (req.request == "PURGE") {
    if (!client.ip ~ purgers) {
            error 405 "Not allowed.";
        }
        return (lookup);
  }
    if (req.request == "BAN") {
    if (!client.ip ~ purgers) {
            error 405 "Not allowed.";
        }

       ban("obj.http.x-url ~ ^" + req.http.x-ban-url + "$");
       error 200 "Banned";

    }
    if (req.request == "REFRESH") {
    if (!client.ip ~ purgers) {
            error 405 "Not allowed.";
        }
        set req.request = "GET";
        set req.hash_always_miss = true;

    }
}

sub vcl_hit {
        if (req.request == "PURGE") {
                purge;
                error 200 "Purged";
        }
}
sub vcl_miss {
        if (req.request == "PURGE") {
                purge;
                error 404 "Not in cache";
        }
}
sub vcl_pass {
        if (req.request == "PURGE") {
                error 502 "PURGE on a passed object";
        }
}

sub vcl_deliver {
    unset resp.http.x-url;

    #This is for debugging, remove for production site.
  if (obj.hits > 0) {
    set resp.http.X-Varnish-Cache = "HIT";
  }
  else {
    set resp.http.X-Varnish-Cache = "MISS";
  }
    return (deliver);
    #end debug
}
